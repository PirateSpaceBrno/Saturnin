// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.3.2.0
//      SpecFlow Generator Version:2.3.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Saturnin.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.3.2.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("GeoLocationHelper")]
    public partial class GeoLocationHelperFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GeoLocationHelper.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "GeoLocationHelper", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test if point is inside circle")]
        [NUnit.Framework.TestCaseAttribute("49.1989733", "16.5971546", "inside", "49.1989733", "16.5971546", "10", null)]
        [NUnit.Framework.TestCaseAttribute("49.1989733", "16.5971546", "inside", "49.1989733", "16.5971546", "1", null)]
        [NUnit.Framework.TestCaseAttribute("49.1922918", "16.6025405", "outside", "49.1989733", "16.5971546", "1", null)]
        [NUnit.Framework.TestCaseAttribute("49.1908375", "16.6049822", "outside", "49.1989733", "16.5971546", "10", null)]
        [NUnit.Framework.TestCaseAttribute("49.1908375", "16.6049822", "outside", "49.1989733", "16.5971546", "100", null)]
        [NUnit.Framework.TestCaseAttribute("49.1908375", "16.6049822", "outside", "49.1989733", "16.5971546", "1000", null)]
        [NUnit.Framework.TestCaseAttribute("49.1908375", "16.6049822", "inside", "49.1989733", "16.5971546", "10000", null)]
        public virtual void TestIfPointIsInsideCircle(string lat1, string lon1, string insideOutside, string lat2, string lon2, string radius, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test if point is inside circle", exampleTags);
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
 testRunner.Then(string.Format("Point \'{0}\'\'{1}\' is \'{2}\' circle with center \'{3}\'\'{4}\' and radius \'{5}\'", lat1, lon1, insideOutside, lat2, lon2, radius), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
